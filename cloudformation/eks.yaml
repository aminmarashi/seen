---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Sample VPC - Private and Public subnets'

Parameters:

  VpcBlock:
    Type: String
    Default: 10.10.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  PublicSubnet01Block:
    Type: String
    Default: 10.10.1.0/24
    Description: CidrBlock for public subnet 01 within the VPC

  PublicSubnet02Block:
    Type: String
    Default: 10.10.2.0/24
    Description: CidrBlock for public subnet 02 within the VPC

  PrivateSubnet01Block:
    Type: String
    Default: 10.10.3.0/24
    Description: CidrBlock for private subnet 01 within the VPC

  PrivateSubnet02Block:
    Type: String
    Default: 10.10.4.0/24
    Description: CidrBlock for private subnet 02 within the VPC
  ## Node group config

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Worker Network Configuration
        Parameters:
          - VpcBlock
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PrivateSubnet01Block
          - PrivateSubnet02Block

Resources:

  eksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub '${AWS::StackName}-cluster'
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet01
          - !Ref PublicSubnet02
          - !Ref PrivateSubnet01
          - !Ref PrivateSubnet02
      RoleArn: !GetAtt eksClusterRole.Arn

  eksClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Path: /
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC'

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ1
      - Key: Network
        Value: Private01

  PrivateRouteTable02:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet AZ2
      - Key: Network
        Value: Private02

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute01:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  PrivateRoute02:
    DependsOn:
    - VPCGatewayAttachment
    - NatGateway02
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable02
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway02

  NatGateway01:
    DependsOn:
    - NatGatewayEIP1
    - PublicSubnet01
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
      SubnetId: !Ref PublicSubnet01
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NatGatewayAZ1'

  NatGateway02:
    DependsOn:
    - NatGatewayEIP2
    - PublicSubnet02
    - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP2.AllocationId'
      SubnetId: !Ref PublicSubnet02
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NatGatewayAZ2'

  NatGatewayEIP1:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGatewayEIP2:
    DependsOn:
    - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet01"
      - Key: kubernetes.io/role/elb
        Value: 1

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet02"
      - Key: kubernetes.io/role/elb
        Value: 1

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 03
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet01"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet02"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable01

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable02

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC

  NodeGroup:
    Type: "AWS::EKS::Nodegroup"
    Properties:
      Subnets:
        - !Ref PublicSubnet01
        - !Ref PublicSubnet02
        - !Ref PrivateSubnet01
        - !Ref PrivateSubnet02
      ClusterName: !Ref eksCluster
      NodeRole: !GetAtt eksClusterRole.Arn
      InstanceTypes:
        - m1.medium
  Jenkins:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: ami-0a634ae95e11c6f91
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnet01
      KeyName: aminm2
      SecurityGroupIds:
        - !GetAtt JenkinsSecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet01
      IamInstanceProfile:
        Ref: JenkinsRoleProfile
      UserData: |
        IyEvYmluL2Jhc2gKCnNldCAtZQoKIyBEZXBlbmRlbmNpZXMKd2dldCAtcSAtTyAtIGh0dHBzOi8v
        cGtnLmplbmtpbnMuaW8vZGViaWFuLXN0YWJsZS9qZW5raW5zLmlvLmtleSB8IHN1ZG8gYXB0LWtl
        eSBhZGQgLQpzdWRvIHNoIC1jICdlY2hvIGRlYiBodHRwczovL3BrZy5qZW5raW5zLmlvL2RlYmlh
        bi1zdGFibGUgYmluYXJ5LyA+IC9ldGMvYXB0L3NvdXJjZXMubGlzdC5kL2plbmtpbnMubGlzdCcK
        c3VkbyBhcHQtZ2V0IHVwZGF0ZQpzdWRvIGFwdC1nZXQgaW5zdGFsbCBweXRob24zLXBpcCAteQpz
        dWRvIGFwdC1nZXQgaW5zdGFsbCBvcGVuamRrLTgtanJlIC15CgojIFNldHVwIGplbmtpbnMKc3Vk
        byBhcHQtZ2V0IGluc3RhbGwgamVua2lucyAteQp3Z2V0IGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9q
        bmxwSmFycy9qZW5raW5zLWNsaS5qYXIKamVua2luc19wYXNzd29yZD0kKGNhdCAvdmFyL2xpYi9q
        ZW5raW5zL3NlY3JldHMvaW5pdGlhbEFkbWluUGFzc3dvcmQpCmphdmEgLWphciBqZW5raW5zLWNs
        aS5qYXIgLXMgaHR0cDovL2xvY2FsaG9zdDo4MDgwIC1hdXRoIGFkbWluOiRqZW5raW5zX3Bhc3N3
        b3JkIGluc3RhbGwtcGx1Z2luIGt1YmVybmV0ZXMKamF2YSAtamFyIGplbmtpbnMtY2xpLmphciAt
        cyBodHRwOi8vbG9jYWxob3N0OjgwODAgLWF1dGggYWRtaW46JGplbmtpbnNfcGFzc3dvcmQgaW5z
        dGFsbC1wbHVnaW4gd29ya2Zsb3ctam9iCmphdmEgLWphciBqZW5raW5zLWNsaS5qYXIgLXMgaHR0
        cDovL2xvY2FsaG9zdDo4MDgwIC1hdXRoIGFkbWluOiRqZW5raW5zX3Bhc3N3b3JkIGluc3RhbGwt
        cGx1Z2luIHdvcmtmbG93LWFnZ3JlZ2F0b3IKamF2YSAtamFyIGplbmtpbnMtY2xpLmphciAtcyBo
        dHRwOi8vbG9jYWxob3N0OjgwODAgLWF1dGggYWRtaW46JGplbmtpbnNfcGFzc3dvcmQgaW5zdGFs
        bC1wbHVnaW4gY3JlZGVudGlhbHMtYmluZGluZwpqYXZhIC1qYXIgamVua2lucy1jbGkuamFyIC1z
        IGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MCAtYXV0aCBhZG1pbjokamVua2luc19wYXNzd29yZCBpbnN0
        YWxsLXBsdWdpbiBnaXQKamF2YSAtamFyIGplbmtpbnMtY2xpLmphciAtcyBodHRwOi8vbG9jYWxo
        b3N0OjgwODAgLWF1dGggYWRtaW46JGplbmtpbnNfcGFzc3dvcmQgaW5zdGFsbC1wbHVnaW4gY29t
        bWFuZC1sYXVuY2hlcgpqYXZhIC1qYXIgamVua2lucy1jbGkuamFyIC1zIGh0dHA6Ly9sb2NhbGhv
        c3Q6ODA4MCAtYXV0aCBhZG1pbjokamVua2luc19wYXNzd29yZCBpbnN0YWxsLXBsdWdpbiBnaXRo
        dWItYnJhbmNoLXNvdXJjZQpqYXZhIC1qYXIgamVua2lucy1jbGkuamFyIC1zIGh0dHA6Ly9sb2Nh
        bGhvc3Q6ODA4MCAtYXV0aCBhZG1pbjokamVua2luc19wYXNzd29yZCBpbnN0YWxsLXBsdWdpbiBk
        b2NrZXItd29ya2Zsb3cKamF2YSAtamFyIGplbmtpbnMtY2xpLmphciAtcyBodHRwOi8vbG9jYWxo
        b3N0OjgwODAgLWF1dGggYWRtaW46JGplbmtpbnNfcGFzc3dvcmQgaW5zdGFsbC1wbHVnaW4gcGlw
        ZWxpbmUtdXRpbGl0eS1zdGVwcwpqYXZhIC1qYXIgamVua2lucy1jbGkuamFyIC1zIGh0dHA6Ly9s
        b2NhbGhvc3Q6ODA4MCAtYXV0aCBhZG1pbjokamVua2luc19wYXNzd29yZCBpbnN0YWxsLXBsdWdp
        biBibHVlb2NlYW4tcmVzdApqYXZhIC1qYXIgamVua2lucy1jbGkuamFyIC1zIGh0dHA6Ly9sb2Nh
        bGhvc3Q6ODA4MCAtYXV0aCBhZG1pbjokamVua2luc19wYXNzd29yZCBpbnN0YWxsLXBsdWdpbiBi
        bHVlb2NlYW4td2ViCmphdmEgLWphciBqZW5raW5zLWNsaS5qYXIgLXMgaHR0cDovL2xvY2FsaG9z
        dDo4MDgwIC1hdXRoIGFkbWluOiRqZW5raW5zX3Bhc3N3b3JkIGluc3RhbGwtcGx1Z2luIGJsdWVv
        Y2Vhbi1qd3QKamF2YSAtamFyIGplbmtpbnMtY2xpLmphciAtcyBodHRwOi8vbG9jYWxob3N0Ojgw
        ODAgLWF1dGggYWRtaW46JGplbmtpbnNfcGFzc3dvcmQgaW5zdGFsbC1wbHVnaW4gYmx1ZW9jZWFu
        LXBpcGVsaW5lLXNjbS1hcGkKamF2YSAtamFyIGplbmtpbnMtY2xpLmphciAtcyBodHRwOi8vbG9j
        YWxob3N0OjgwODAgLWF1dGggYWRtaW46JGplbmtpbnNfcGFzc3dvcmQgaW5zdGFsbC1wbHVnaW4g
        Ymx1ZW9jZWFuLXJlc3QtaW1wbApqYXZhIC1qYXIgamVua2lucy1jbGkuamFyIC1zIGh0dHA6Ly9s
        b2NhbGhvc3Q6ODA4MCAtYXV0aCBhZG1pbjokamVua2luc19wYXNzd29yZCBpbnN0YWxsLXBsdWdp
        biBibHVlb2NlYW4tY29yZS1qcwpqYXZhIC1qYXIgamVua2lucy1jbGkuamFyIC1zIGh0dHA6Ly9s
        b2NhbGhvc3Q6ODA4MCAtYXV0aCBhZG1pbjokamVua2luc19wYXNzd29yZCBpbnN0YWxsLXBsdWdp
        biBibHVlb2NlYW4tcGlwZWxpbmUtYXBpLWltcGwKamF2YSAtamFyIGplbmtpbnMtY2xpLmphciAt
        cyBodHRwOi8vbG9jYWxob3N0OjgwODAgLWF1dGggYWRtaW46JGplbmtpbnNfcGFzc3dvcmQgaW5z
        dGFsbC1wbHVnaW4gYmx1ZW9jZWFuLWRhc2hib2FyZApqYXZhIC1qYXIgamVua2lucy1jbGkuamFy
        IC1zIGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MCAtYXV0aCBhZG1pbjokamVua2luc19wYXNzd29yZCBp
        bnN0YWxsLXBsdWdpbiBibHVlb2NlYW4tZ2l0LXBpcGVsaW5lCmphdmEgLWphciBqZW5raW5zLWNs
        aS5qYXIgLXMgaHR0cDovL2xvY2FsaG9zdDo4MDgwIC1hdXRoIGFkbWluOiRqZW5raW5zX3Bhc3N3
        b3JkIGluc3RhbGwtcGx1Z2luIGJsdWVvY2Vhbi1naXRodWItcGlwZWxpbmUKamF2YSAtamFyIGpl
        bmtpbnMtY2xpLmphciAtcyBodHRwOi8vbG9jYWxob3N0OjgwODAgLWF1dGggYWRtaW46JGplbmtp
        bnNfcGFzc3dvcmQgaW5zdGFsbC1wbHVnaW4gYmx1ZW9jZWFuLWRpc3BsYXktdXJsCmphdmEgLWph
        ciBqZW5raW5zLWNsaS5qYXIgLXMgaHR0cDovL2xvY2FsaG9zdDo4MDgwIC1hdXRoIGFkbWluOiRq
        ZW5raW5zX3Bhc3N3b3JkIGluc3RhbGwtcGx1Z2luIGJsdWVvY2Vhbi1jb25maWcKamF2YSAtamFy
        IGplbmtpbnMtY2xpLmphciAtcyBodHRwOi8vbG9jYWxob3N0OjgwODAgLWF1dGggYWRtaW46JGpl
        bmtpbnNfcGFzc3dvcmQgaW5zdGFsbC1wbHVnaW4gYmx1ZW9jZWFuLXBpcGVsaW5lLWVkaXRvcgpq
        YXZhIC1qYXIgamVua2lucy1jbGkuamFyIC1zIGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MCAtYXV0aCBh
        ZG1pbjokamVua2luc19wYXNzd29yZCBpbnN0YWxsLXBsdWdpbiBibHVlb2NlYW4tZXZlbnRzCmph
        dmEgLWphciBqZW5raW5zLWNsaS5qYXIgLXMgaHR0cDovL2xvY2FsaG9zdDo4MDgwIC1hdXRoIGFk
        bWluOiRqZW5raW5zX3Bhc3N3b3JkIGluc3RhbGwtcGx1Z2luIGJsdWVvY2VhbgpqYXZhIC1qYXIg
        amVua2lucy1jbGkuamFyIC1zIGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MCAtYXV0aCBhZG1pbjokamVu
        a2luc19wYXNzd29yZCBpbnN0YWxsLXBsdWdpbiBibHVlb2NlYW4tZXhlY3V0b3ItaW5mbwpqYXZh
        IC1qYXIgamVua2lucy1jbGkuamFyIC1zIGh0dHA6Ly9sb2NhbGhvc3Q6ODA4MCAtYXV0aCBhZG1p
        bjokamVua2luc19wYXNzd29yZCBpbnN0YWxsLXBsdWdpbiBibHVlb2NlYW4tY29tbW9ucwoKIyBT
        ZXR1cCBrOHMKc3VkbyBwaXAzIGluc3RhbGwgYXdzY2xpCnN1ZG8gLWl1IGplbmtpbnMgY3VybCAt
        TCAtbyAvdmFyL2xpYi9qZW5raW5zL2t1YmVjdGwgImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlz
        LmNvbS9rdWJlcm5ldGVzLXJlbGVhc2UvcmVsZWFzZS8kKGN1cmwgLXMgaHR0cHM6Ly9zdG9yYWdl
        Lmdvb2dsZWFwaXMuY29tL2t1YmVybmV0ZXMtcmVsZWFzZS9yZWxlYXNlL3N0YWJsZS50eHQpL2Jp
        bi9saW51eC9hbWQ2NC9rdWJlY3RsIgpzdWRvIC1pdSBqZW5raW5zIGNobW9kICt4IC92YXIvbGli
        L2plbmtpbnMva3ViZWN0bApzdWRvIC1pdSBqZW5raW5zIGF3cyBla3MgLS1yZWdpb24gdXMtd2Vz
        dC0yIHVwZGF0ZS1rdWJlY29uZmlnIC0tbmFtZSBla3MtY2x1c3Rlcgo=

  JenkinsRoleProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - Ref: eksClusterRole
  JenkinsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Allow ssh and jenkins web
      SecurityGroupIngress: 
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        ToPort: 22
        IpProtocol: tcp
      - CidrIp: 0.0.0.0/0
        FromPort: 8080
        ToPort: 8080
        IpProtocol: tcp
      VpcId: !Ref VPC
Outputs:
  SubnetIds:
    Description: Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref PublicSubnet01, !Ref PublicSubnet02, !Ref PrivateSubnet01, !Ref PrivateSubnet02 ] ]

  SecurityGroups:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]

  VpcId:
    Description: The VPC Id
    Value: !Ref VPC

  eksClusterRole:
    Description: The node instance role
    Value: !GetAtt eksClusterRole.Arn

