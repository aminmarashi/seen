<!doctype html>
<html>
include head.pug
|   <body>
|       <div class="mdl-layout mdl-js-layout mdl-layout--fixed-header mdl-layout--no-drawer-button">
include header.pug
|           <main class="mdl-layout__content">
div(class="mdl-grid")
    div(class="mdl-cell mdl-cell--1-col")
    div(class="mdl-cell mdl-cell--10-col")
        table(class="mdl-data-table mdl-js-data-table mdl-shadow--6dp" style="white-space: nowrap; display: block; overflow-x: scroll")
            thead
                tr
                    td(class="mdl-data-table__cell--non-numeric") Name
                    td(class="mdl-data-table__cell--non-numeric") IP Address
                    td(class="mdl-data-table__cell--non-numeric") Date
                    td(class="mdl-data-table__cell--non-numeric") User Agent
                    td(class="mdl-data-table__cell--non-numeric") Referer
            tbody(id="stats")
                each stat in stats
                    tr
                        - var record = JSON.parse(stat.record);
                        td(class="mdl-data-table__cell--non-numeric")
                            a(href=`${path}/${stat.receipt_id}`)= stat.receipt_name
                        td(class="mdl-data-table__cell--non-numeric")= record['cf-connecting-ip']
                        td(class="mdl-data-table__cell--non-numeric")= stat.timestamp
                        td(class="mdl-data-table__cell--non-numeric")= record['user-agent']
                        td(class="mdl-data-table__cell--non-numeric")= record['referer']
    div(class="mdl-cell mdl-cell--1-col")
|           </main>
|           <div id="snackbarContainer" class="mdl-js-snackbar mdl-snackbar">
|              <div class="mdl-snackbar__text"></div>
|              <button class="mdl-snackbar__action" type="button"></button>
|           </div>
|       </div>
|   </body>
script.
    function select(elem) {
        var s = window.getSelection()
        var r = document.createRange();
        r.selectNode(elem);
        s.addRange(r)
    }

    function copyToClipboard(id) {
        // create hidden text element, if it doesn't already exist
        var targetId = "_hiddenCopyImg_";
        var origSelectionStart, origSelectionEnd;
        // must use a temporary form element for the selection and copy
        target = document.getElementById(targetId);
        if (!target) {
            var target = document.createElement("img");
            target.style.position = "absolute";
            target.style.left = "-9999px";
            target.style.top = "0";
            target.id = targetId;
            document.body.appendChild(target);
        }
        target.src = `/${id}.png`;
        // select the content
        var currentFocus = document.activeElement;
        target.focus();
        select(target)

        // copy the selection
        var succeed;
        try {
                succeed = document.execCommand("copy");
        } catch(e) {
            snackbarContainer.MaterialSnackbar.showSnackbar({
                message: 'Something went wrong'
            });
            succeed = false;
        }
        // restore original focus
        if (currentFocus && typeof currentFocus.focus === "function") {
            currentFocus.focus();
        }

        // clear temporary content
        target.textContent = "";
        snackbarContainer.MaterialSnackbar.showSnackbar({
            message: 'Copied to clipboard'
        });
        return succeed;
    }

- const lastItem = stats[stats.length - 1];
script
    |let last;
    = `let date = new Date('${lastItem.timestamp}');`
    |setInterval(() => {
    |last = date;
    = `fetch('/track${receipt ? '/' + receipt.id : ''}', {`
    |           method: "POST",
    |           headers: { 'Content-Type': 'application/json' },
    |           body: JSON.stringify({after: `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`}),
    |       }).then(r => r.json()).then(res => {
    |           const clone = stats.querySelector('tr:nth-last-child(1)').cloneNode(true);
    |           res.stats.forEach(stat => {
    |               date = new Date(stat.timestamp);
    |               if (date < last) {
    |                  return;
    |               }
    |               const record = JSON.parse(stat.record);
    |               const link = clone.querySelector('a');
    |               link.innerText = stat.receipt_name;
    |               link.href = `/track/${stat.receipt_id}`;
    |               clone.children[1].innerText = record['cf-connecting-ip'] || '';
    |               clone.children[2].innerText = date.toString();
    |               clone.children[3].innerText = record['user-agent'];
    |               clone.children[4].innerText = record['referer'];
    |               stats.appendChild(clone);
    |           })
    |       }, console.error);
    |}, 4000);
include libs.pug
</html>
